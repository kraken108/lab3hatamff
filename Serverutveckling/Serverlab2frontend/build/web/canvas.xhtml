<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">
    <h:head>
        <title>Facelet Title</title>
        <style>
            /* Some CSS styling */


            #sketchpad {
                float:left;
                border:2px solid #888;
                border-radius:4px;
                position:relative; /* Necessary for correct mouse co-ords in Firefox */
            }
        </style>

    </h:head>
    <h:body rendered="#{userBean.isLoggedIn}" onload="init()">

        <ui:include src='navbar.xhtml'/>
        <div style="float:left">
            <h1>Welcome to the canvas!</h1>
            <h:commandButton type="submit" value="Clear sketchpad" onclick="clearCanvas(canvas, ctx);"></h:commandButton>
            <canvas id="sketchpad" width="400" height="300"></canvas>
        </div>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js">
        </script> 
        <script type="text/javascript">
            // Variables for referencing the canvas and 2dcanvas context
            var canvas, ctx;

// Variables to keep track of the mouse position and left-button status 
            var mouseX, mouseY, mouseDown = 0;

            var isConnected = false;
            var connection;
// Draws a dot at a specific position on the supplied canvas name
// Parameters are: A canvas context, the x position, the y position, the size of the dot
            function drawDot(ctx, x, y, size) {
                // Let's use black by setting RGB values to 0, and 255 alpha (completely opaque)
                r = 0;
                g = 0;
                b = 0;
                a = 255;

                // Select a fill style
                ctx.fillStyle = "rgba(" + r + "," + g + "," + b + "," + (a / 255) + ")";

                // Draw a filled circle
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2, true);
                ctx.closePath();
                ctx.fill();
            }

// Clear the canvas context using the canvas width and height
            function clearCanvas(canvas, ctx) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }

// Keep track of the mouse button being pressed and draw a dot at current location
            function sketchpad_mouseDown() {
                mouseDown = 1;
                drawDot(ctx, mouseX, mouseY, 5);
            }

// Keep track of the mouse button being released
            function sketchpad_mouseUp() {
                mouseDown = 0;
            }

// Keep track of the mouse position and draw a dot if mouse button is currently pressed
            function sketchpad_mouseMove(e) {
                // Update the mouse co-ordinates when moved
                getMousePos(e);

                // Draw a dot if the mouse button is currently being pressed
                if (mouseDown == 1) {
                    if (isConnected) {
                        connection.send("1 " + mouseX + " " + mouseY);
                    }
                    drawDot(ctx, mouseX, mouseY, 5);
                }
            }

// Get the current mouse position relative to the top-left of the canvas
            function getMousePos(e) {
                if (!e)
                    var e = event;

                if (e.offsetX) {
                    mouseX = e.offsetX;
                    mouseY = e.offsetY;
                } else if (e.layerX) {
                    mouseX = e.layerX;
                    mouseY = e.layerY;
                }
            }


            // Set-up the canvas and add our event handlers after the page has loaded
            function init() {
                // Get the specific canvas element from the HTML document
                canvas = document.getElementById('sketchpad');

                // If the browser supports the canvas tag, get the 2d drawing context for this canvas
                if (canvas.getContext)
                    ctx = canvas.getContext('2d');

                // Check that we have a valid context to draw on/with before adding event handlers
                if (ctx) {
                    canvas.addEventListener('mousedown', sketchpad_mouseDown, false);
                    canvas.addEventListener('mousemove', sketchpad_mouseMove, false);
                    window.addEventListener('mouseup', sketchpad_mouseUp, false);
                }


                // if user is running mozilla then use it's built-in WebSocket
                window.WebSocket = window.WebSocket || window.MozWebSocket;
                // if browser doesn't support WebSocket, just show
                // some notification and exit
                if (!window.WebSocket) {
                    return;
                }
                // open connection
                connection = new WebSocket('ws://127.0.0.1:1337');
                connection.onopen = function () {
                    isConnected = true;
                    // first we want users to enter their names
                };
                connection.onerror = function (error) {
                    isConnected = false;
                    // just in there were some problems with connection...
                };

                // most important part - incoming messages
                connection.onmessage = function (message) {
                    try {
                        var json = JSON.parse(message.data);
                    } catch (e) {
                        console.log('Invalid JSON: ', message.data);
                        return;
                    }

                    if (json.type === 'message') {
                        addMessage(json.data.x, json.data.y);
                    } else {
                        console.log('Hmm..., I\'ve never seen JSON like this:', json);
                    }


                };

                /**
                 * Add message to the chat window
                 */
                function addMessage(x, y) {
                    drawDot(ctx, x, y, 5);
                }
            }

        </script>

    </h:body>
</html>

